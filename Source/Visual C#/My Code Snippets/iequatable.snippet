<?xml version="1.0" encoding="utf-8" ?>
<CodeSnippets  xmlns="http://schemas.microsoft.com/VisualStudio/2005/CodeSnippet">
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>IEquatable</Title>
      <Shortcut>iequatable</Shortcut>
      <Description>Template implementation of IEquatable.</Description>
      <Author>Matthew King</Author>
    </Header>
    <Snippet>
      <Declarations>
        <Literal Editable="false">
          <ID>EnclosingClass</ID>
          <Function>ClassName()</Function>
        </Literal>
      </Declarations>
      <Code Language="CSharp">
<![CDATA[/// <summary>
/// Determines whether the current object is equal to another object of the same type.
/// </summary>
/// <param name="other">An object to compare with this object.</param>
/// <returns>
/// true if the current object is equal to the specified object; otherwise, false.
/// </returns>
public bool Equals($EnclosingClass$ other)
{
    if (Object.ReferenceEquals(other, null)) return false;
    if (Object.ReferenceEquals(other, this)) return true;
 
    return false; /* ToDo: Insert comparison logic here */
}
 
/// <summary>
/// Determines whether the current object is equal to another object.
/// </summary>
/// <param name="obj">An object to compare with this object.</param>
/// <returns>
/// true if the current object is equal to the specified object; otherwise, false.
/// </returns>
public override bool Equals(object obj)
{
    return this.Equals(obj as $EnclosingClass$);
}
 
/// <summary>
/// Serves as a hash function.
/// </summary>
/// <returns>A hash code for the current object.</returns>
public override int GetHashCode()
{
    unchecked
    {
        int hash = 17;
 
        // ToDo: Repeat for each property (with suitable null checks, etc.)
        // hash = (hash * 29) + this.Property.GetHashCode();
 
        return hash;
    }
}]]>
      </Code>
    </Snippet>
  </CodeSnippet>
</CodeSnippets>
